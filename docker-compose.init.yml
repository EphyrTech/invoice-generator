version: '3.8'

# Docker Compose with init container for password generation
# Usage: docker-compose -f docker-compose.init.yml up --build

services:
  # Init container to generate passwords
  password-generator:
    image: alpine:latest
    command: |
      sh -c "
        echo 'Generating random passwords...'
        mkdir -p /shared
        
        # Generate passwords
        DB_PASSWORD=$$(openssl rand -base64 32 | tr -d '=+/' | cut -c1-25)
        NEXTAUTH_SECRET=$$(openssl rand -base64 32)
        ADMIN_PASSWORD=$$(openssl rand -base64 16 | tr -d '=+/' | cut -c1-12)
        
        # Save to shared volume
        echo \"$$DB_PASSWORD\" > /shared/db_password
        echo \"$$NEXTAUTH_SECRET\" > /shared/nextauth_secret
        echo \"$$ADMIN_PASSWORD\" > /shared/admin_password
        
        # Create environment file
        cat > /shared/.env << EOF
        POSTGRES_USER=invoice_user
        POSTGRES_PASSWORD=$$DB_PASSWORD
        POSTGRES_DB=invoice_db
        NEXTAUTH_SECRET=$$NEXTAUTH_SECRET
        ADMIN_PASSWORD=$$ADMIN_PASSWORD
        EOF
        
        echo 'Passwords generated successfully!'
        echo 'Database password:' $$DB_PASSWORD
        echo 'Admin password:' $$ADMIN_PASSWORD
      "
    volumes:
      - shared_secrets:/shared

  app:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - SKIP_BUILD_STATIC_GENERATION=true
    restart: unless-stopped
    ports:
      - "3000"
    environment:
      # Production environment
      - NODE_ENV=production
      - PORT=3000
      - HOSTNAME=0.0.0.0

      # Disable telemetry
      - NEXT_TELEMETRY_DISABLED=1
    env_file:
      - /shared/.env
    depends_on:
      password-generator:
        condition: service_completed_successfully
      db:
        condition: service_healthy
    networks:
      - app-network
    volumes:
      - shared_secrets:/shared:ro
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  db:
    image: postgres:15-alpine
    restart: unless-stopped
    env_file:
      - /shared/.env
    environment:
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256 --auth-local=scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - shared_secrets:/shared:ro
      - ./backups:/backups:rw
      - ./docker/init-db.sql:/docker-entrypoint-initdb.d/01-init-db.sql:ro
    depends_on:
      password-generator:
        condition: service_completed_successfully
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U invoice_user -d invoice_db"]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 30s

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  shared_secrets:
    driver: local
