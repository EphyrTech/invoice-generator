version: '3.8'

# Simple approach: Generate passwords inline (for development/testing only)
# Usage: docker-compose -f docker-compose.random.yml up --build
# Note: This generates new passwords on every docker-compose up!

x-random-password: &random-password
  # Generate a random 25-character password
  $(openssl rand -base64 32 | tr -d "=+/" | cut -c1-25)

x-random-secret: &random-secret
  # Generate a random 32-character secret
  $(openssl rand -base64 32)

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - SKIP_BUILD_STATIC_GENERATION=true
    restart: unless-stopped
    ports:
      - "3000"
    environment:
      # Production environment
      - NODE_ENV=production
      - PORT=3000
      - HOSTNAME=0.0.0.0

      # Database connection with inline password generation
      # WARNING: This generates a NEW password every time!
      - DATABASE_URL=postgresql://invoice_user:${DB_PASSWORD:-defaultpass}@db:5432/invoice_db

      # NextAuth configuration
      - NEXTAUTH_URL=${NEXTAUTH_URL:-http://localhost:3000}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET:-defaultsecret}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD:-admin123}

      # Disable telemetry
      - NEXT_TELEMETRY_DISABLED=1
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  db:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      # Database configuration
      - POSTGRES_USER=invoice_user
      - POSTGRES_PASSWORD=${DB_PASSWORD:-defaultpass}
      - POSTGRES_DB=invoice_db
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256 --auth-local=scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups:rw
      - ./docker/init-db.sql:/docker-entrypoint-initdb.d/01-init-db.sql:ro
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U invoice_user -d invoice_db"]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 30s

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
