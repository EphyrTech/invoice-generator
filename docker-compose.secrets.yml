version: '3.8'

# Docker Compose for production deployment
# Usage: docker-compose -f docker-compose.secrets.yml up --build

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - SKIP_BUILD_STATIC_GENERATION=true
    restart: unless-stopped
    ports:
      - "3000"
    environment:
      # Production environment
      - NODE_ENV=production
      - PORT=3000
      - HOSTNAME=0.0.0.0

      # Database connection
      - DATABASE_URL=postgresql://invoice_user:${DB_PASSWORD:-invoice_secure_password_2024}@db:5432/invoice_db

      # NextAuth configuration
      - NEXTAUTH_URL=${NEXTAUTH_URL:-http://localhost:3000}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET:-invoice-nextauth-secret-change-in-production-2024}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD:-admin123}

      # Disable telemetry
      - NEXT_TELEMETRY_DISABLED=1
    depends_on:
      db:
        condition: service_healthy
      db-init:
        condition: service_completed_successfully
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    labels:
      - "coolify.managed=true"

  db:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      # Database configuration
      - POSTGRES_USER=invoice_user
      - POSTGRES_PASSWORD=${DB_PASSWORD:-invoice_secure_password_2024}
      - POSTGRES_DB=invoice_db
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256 --auth-local=scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups:rw
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U invoice_user -d invoice_db"]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 30s

  db-init:
    image: postgres:15-alpine
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network
    environment:
      - PGPASSWORD=${DB_PASSWORD:-invoice_secure_password_2024}
    command: |
      sh -c "
        echo 'Initializing database...'

        # Wait for database to be fully ready and user created
        echo 'Waiting for database to be ready...'
        until pg_isready -h db -U invoice_user -d invoice_db; do
          echo 'Database not ready, waiting...'
          sleep 2
        done

        echo 'Database is ready, checking if already initialized...'

        # Check if business_profiles table exists
        if psql -h db -U invoice_user -d invoice_db -t -c \"SELECT EXISTS (SELECT FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'business_profiles');\" | grep -q 't'; then
          echo 'Database already initialized'
          exit 0
        fi

        echo 'Creating database schema...'
        psql -h db -U invoice_user -d invoice_db << 'EOF'

        -- Create users table
        CREATE TABLE IF NOT EXISTS users (
          id TEXT PRIMARY KEY,
          name TEXT,
          email TEXT NOT NULL UNIQUE,
          email_verified TIMESTAMP,
          image TEXT,
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
          updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );

        -- Create sessions table
        CREATE TABLE IF NOT EXISTS sessions (
          session_token TEXT PRIMARY KEY,
          user_id TEXT NOT NULL REFERENCES users(id) ON DELETE CASCADE,
          expires TIMESTAMP NOT NULL
        );

        -- Create verification tokens table
        CREATE TABLE IF NOT EXISTS verification_tokens (
          identifier TEXT NOT NULL,
          token TEXT NOT NULL,
          expires TIMESTAMP NOT NULL,
          PRIMARY KEY (identifier, token)
        );

        -- Create business profiles table
        CREATE TABLE IF NOT EXISTS business_profiles (
          id TEXT PRIMARY KEY,
          user_id TEXT NOT NULL REFERENCES users(id) ON DELETE CASCADE,
          name TEXT NOT NULL,
          email TEXT,
          phone TEXT,
          address TEXT,
          city TEXT,
          state TEXT,
          postal_code TEXT,
          country TEXT,
          tax_id TEXT,
          logo_url TEXT,
          created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
          updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
        );

        -- Create clients table
        CREATE TABLE IF NOT EXISTS clients (
          id TEXT PRIMARY KEY,
          user_id TEXT NOT NULL REFERENCES users(id) ON DELETE CASCADE,
          name TEXT NOT NULL,
          email TEXT,
          phone TEXT,
          address TEXT,
          city TEXT,
          state TEXT,
          postal_code TEXT,
          country TEXT,
          tax_id TEXT,
          notes TEXT,
          is_business_profile BOOLEAN DEFAULT FALSE,
          business_profile_id TEXT REFERENCES business_profiles(id) ON DELETE SET NULL,
          created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
          updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
        );

        -- Create invoice templates table
        CREATE TABLE IF NOT EXISTS invoice_templates (
          id TEXT PRIMARY KEY,
          user_id TEXT NOT NULL REFERENCES users(id) ON DELETE CASCADE,
          name TEXT NOT NULL,
          description TEXT,
          business_profile_id TEXT REFERENCES business_profiles(id) ON DELETE SET NULL,
          client_id TEXT REFERENCES clients(id) ON DELETE SET NULL,
          due_days INTEGER DEFAULT 30,
          tax_rate REAL DEFAULT 0,
          notes TEXT,
          terms TEXT,
          invoice_number_pattern TEXT DEFAULT 'INV-{YYYY}-{####}',
          invoice_number_next_value INTEGER DEFAULT 1,
          invoice_number_prefix TEXT DEFAULT 'INV',
          invoice_number_suffix TEXT DEFAULT '',
          invoice_number_date_format TEXT DEFAULT 'YYYY',
          invoice_number_counter_digits INTEGER DEFAULT 4,
          invoice_number_reset_frequency TEXT DEFAULT 'never',
          invoice_number_last_reset_date TEXT,
          created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
          updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
        );

        -- Create invoices table
        CREATE TABLE IF NOT EXISTS invoices (
          id TEXT PRIMARY KEY,
          user_id TEXT NOT NULL REFERENCES users(id) ON DELETE CASCADE,
          invoice_number TEXT NOT NULL,
          business_profile_id TEXT REFERENCES business_profiles(id) ON DELETE SET NULL,
          client_id TEXT REFERENCES clients(id) ON DELETE SET NULL,
          template_id TEXT REFERENCES invoice_templates(id) ON DELETE SET NULL,
          issue_date DATE NOT NULL,
          due_date DATE NOT NULL,
          subtotal REAL NOT NULL DEFAULT 0,
          tax_rate REAL DEFAULT 0,
          tax_amount REAL DEFAULT 0,
          total REAL NOT NULL DEFAULT 0,
          status TEXT DEFAULT 'draft',
          notes TEXT,
          terms TEXT,
          created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
          updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
        );

        -- Create invoice items table
        CREATE TABLE IF NOT EXISTS invoice_items (
          id TEXT PRIMARY KEY,
          invoice_id TEXT NOT NULL REFERENCES invoices(id) ON DELETE CASCADE,
          description TEXT NOT NULL,
          quantity REAL NOT NULL DEFAULT 1,
          unit_price REAL NOT NULL DEFAULT 0,
          amount REAL NOT NULL DEFAULT 0,
          tax_rate REAL DEFAULT 0,
          tax_amount REAL DEFAULT 0,
          created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
          updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
        );

        -- Create invoice template items table
        CREATE TABLE IF NOT EXISTS invoice_template_items (
          id TEXT PRIMARY KEY,
          template_id TEXT NOT NULL REFERENCES invoice_templates(id) ON DELETE CASCADE,
          description TEXT NOT NULL,
          quantity REAL NOT NULL DEFAULT 1,
          unit_price REAL NOT NULL DEFAULT 0,
          amount REAL NOT NULL DEFAULT 0,
          tax_rate REAL DEFAULT 0,
          tax_amount REAL DEFAULT 0,
          created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
          updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
        );

        -- Insert default data
        INSERT INTO users (id, name, email, email_verified, created_at, updated_at)
        SELECT 'user-1', 'Demo User', 'demo@example.com', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
        WHERE NOT EXISTS (SELECT 1 FROM users LIMIT 1);

        INSERT INTO business_profiles (id, user_id, name, email, phone, address, city, state, postal_code, country, tax_id, created_at, updated_at)
        SELECT 'bp-1', 'user-1', 'My Company', 'info@mycompany.com', '+1 (555) 123-4567', '123 Business St', 'City', 'State', '12345', 'USA', '123456789', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
        WHERE NOT EXISTS (SELECT 1 FROM business_profiles LIMIT 1);

        INSERT INTO clients (id, user_id, name, email, phone, address, city, state, postal_code, country, created_at, updated_at)
        SELECT 'client-1', 'user-1', 'Sample Client', 'client@example.com', '+1 (555) 987-6543', '456 Client Ave', 'Client City', 'Client State', '67890', 'USA', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
        WHERE NOT EXISTS (SELECT 1 FROM clients LIMIT 1);

        EOF

        echo 'Database initialization completed successfully!'
      "

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
